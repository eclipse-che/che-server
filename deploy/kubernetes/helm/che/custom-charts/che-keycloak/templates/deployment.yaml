#
# Copyright (c) 2012-2019 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: che
    component: keycloak
    io.kompose.service: keycloak
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: che
      component: keycloak
  strategy:
    type: {{ .Values.deploymentStrategy }}
  template:
    metadata:
      labels:
        app: che
        component: keycloak
        io.kompose.service: keycloak
    spec:
      initContainers:
      - name: wait-for-postgres
        image: {{ .Values.global.endpointWatcher.image }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINT
            value: postgres
      containers:
      - env:
        - name: DB_VENDOR
          value: POSTGRES
        - name: DB_ADDR
          value: postgres
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: keycloak
        - name: DB_USER
          value: keycloak
        - name: DB_PASSWORD
          value: keycloak
{{- if .Values.keycloakCredentialsSecret }}
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.keycloakCredentialsSecret }}
              key: user
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.keycloakCredentialsSecret }}
              key: password
{{- else }}
        - name: KEYCLOAK_USER
          value: {{ .Values.keycloakAdminUserName | default "admin" }}
        - name: KEYCLOAK_PASSWORD
          value: {{ required "keycloakAdminUserPassword cannot be empty" (.Values.keycloakAdminUserPassword | trim) }}
{{- end }}
        - name: CHE_HOST
          value: {{ template "cheHost" . }}
{{- if .Values.global.useInternalClusterSVCNames }}
        {{- if .Values.global.tls.enabled }}
        - name: KEYCLOAK_FRONTEND_URL
          value: https://{{ template "keycloakHost" . }}/auth
        {{- else }}
        - name: KEYCLOAK_FRONTEND_URL
          value: http://{{ template "keycloakHost" . }}/auth
        {{- end }}
{{- end }}
        - name: ROUTING_SUFFIX
          value: {{ .Values.global.ingressDomain }}
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: CHE_KEYCLOAK_ADMIN_REQUIRE_UPDATE_PASSWORD
          value: {{ .Values.requireAdminPasswordChange | quote }}
        - name: PROTOCOL
{{- if .Values.global.tls.enabled }}
          value: "https"
        - name: KEYCLOAK_HTTPS_PORT
          value: "443"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
{{- else }}
          value: "http"
        - name: KEYCLOAK_HTTP_PORT
          value: "80"
{{- end }}

        image: {{ .Values.image }}
        command: ["/scripts/kc_realm_user.sh"]
        imagePullPolicy: Always
        name: keycloak
        livenessProbe:
          failureThreshold: 11
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 30
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: auth/js/keycloak.js
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: 1536Mi
          requests:
            memory: 1024Mi
        volumeMounts:
        - mountPath: /opt/jboss/keycloak/standalone/data
          name: keycloak-data
        - mountPath: /opt/jboss/keycloak/standalone/log
          name: keycloak-log
{{- if not (eq .Values.global.tls.serverTrustStoreConfigMapName "") }}
        - mountPath: /public-certs
          name: che-public-certs
{{- end }}
      restartPolicy: Always
      securityContext:
        # `fsGroup`, `runAsGroup`, and `runAsUser` must be
        # same values that `USER` in the container image.
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      serviceAccountName: che-keycloak
      volumes:
      - name: keycloak-data
        persistentVolumeClaim:
          claimName: keycloak-data
      - name: keycloak-log
        persistentVolumeClaim:
          claimName: keycloak-log
{{- if not (eq .Values.global.tls.serverTrustStoreConfigMapName "") }}
      - name: che-public-certs
        configMap:
          name: {{ .Values.global.tls.serverTrustStoreConfigMapName }}
{{- end }}
status: {}
