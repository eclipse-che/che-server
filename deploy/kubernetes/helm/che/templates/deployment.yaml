#
# Copyright (c) 2012-2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: che
    component: che
  name: che
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: che
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: che
        component: che
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      securityContext:
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      initContainers:
{{- if .Values.global.multiuser }}
      - name: wait-for-postgres
        image: {{ .Values.global.endpointWatcher.image }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINT
            value: postgres
{{- end }}
#wait for keycloak if in multiuser mode and .Values.customOidcProvider was not defined
{{- if (and .Values.global.multiuser (not .Values.customOidcProvider)) }}
      - name: wait-for-keycloak
        image: {{ .Values.global.endpointWatcher.image }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINT
            value: keycloak
{{- end }}
{{- if not .Values.global.multiuser }}
      - name: fmp-volume-permission
        image: busybox
        command: ["chmod", "777", "/data"]
        volumeMounts: [{
              "mountPath": "/data",
              "name": "che-data-volume"
        }]
{{- end }}
      containers:
      - envFrom:
        - configMapRef:
            name: che
        env:
        - name: OPENSHIFT_KUBE_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_NAMESPACE
          value: {{ .Release.Namespace }}

        # If git-self-signed-cert is used then configure Che Server with certificate content
        # to propagate it to the specified location and provide particular configuration for Git service
        {{- if .Values.global.useGitSelfSignedCerts }}
        - name: CHE_GIT_SELF__SIGNED__CERT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.cheGitSelfSignedCertConfigMapName }}
              key: ca.crt
              optional: false
        - name: CHE_GIT_SELF__SIGNED__CERT__HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.global.cheGitSelfSignedCertConfigMapName }}
              key: githost
              optional: false
        {{- end }}

        {{- if .Values.global.tls.enabled }}

        # If self-signed-cert is used then configure Che Server with certificate content
        # to propagate it to trust store
        {{- if .Values.global.tls.useSelfSignedCerts }}
        - name: CHE_SELF__SIGNED__CERT
          valueFrom:
            secretKeyRef:
              key: ca.crt
              name: {{ .Values.global.tls.selfSignedCertSecretName }}
              optional: false
        {{- end }}

        # If workspaces are created in a separate namespace(s)
        # then configure Che Server to propagate TLS secret to workspaces' namespaces
        # Do not propagate anything in case of using default ingress controller certificate (global.tls.secretName is empty)
        {{- if and (ne .Release.Namespace .Values.global.cheWorkspacesNamespace) (.Values.global.tls.secretName) }}
        - name: "CHE_INFRA_KUBERNETES_TLS__CERT"
          valueFrom:
            secretKeyRef:
              key: tls.crt
              name: {{ .Values.global.tls.secretName }}
              optional: false
        - name: "CHE_INFRA_KUBERNETES_TLS__KEY"
          valueFrom:
            secretKeyRef:
              key: tls.key
              name: {{ .Values.global.tls.secretName }}
              optional: false
        {{- end }}
        {{- end }}
        image: {{ .Values.cheImage }}
        imagePullPolicy: {{ .Values.cheImagePullPolicy }}
        securityContext:
          runAsUser: {{ .Values.global.securityContext.runAsUser }}
{{- if not .Values.che.disableProbes }}
        livenessProbe:
          httpGet:
            path: /api/system/state
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/system/state
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          timeoutSeconds: 60
{{- end }}
        name: che
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8000
          name: http-debug
        - containerPort: 8888
          name: jgroups-ping
        - containerPort: 8087
          name: http-metrics
        resources:
          limits:
            memory: 600Mi
          requests:
            memory: 256Mi
{{- if or (not .Values.global.multiuser) (not (eq .Values.global.tls.serverTrustStoreConfigMapName "")) }}
        volumeMounts:
{{- if not .Values.global.multiuser }}
        - mountPath: /data
          name: che-data-volume
{{- end }}
# If serverTrustStoreConfigMapName is defined, then add the che-public-certs volume mount with certificate contents
# to propagate them to trust store.
{{- if not (eq .Values.global.tls.serverTrustStoreConfigMapName "") }}
        - mountPath: /public-certs
          name: che-public-certs
{{- end }}
      volumes:
{{- if not .Values.global.multiuser }}
      - name: che-data-volume
        persistentVolumeClaim:
          claimName: che-data-volume
{{- end }}
# If serverTrustStoreConfigMapName is defined, then add config-map volume.
{{- if not (eq .Values.global.tls.serverTrustStoreConfigMapName "") }}
      - name: che-public-certs
        configMap:
          name: {{ .Values.global.tls.serverTrustStoreConfigMapName }}
{{- end }}
{{- end }}
{{- if .Values.registry }}
{{- if and .Values.registry.password .Values.registry.username }}
      imagePullSecrets:
        - name: registry-pull-secret
{{- end }}
{{- end }}
      serviceAccountName: che
