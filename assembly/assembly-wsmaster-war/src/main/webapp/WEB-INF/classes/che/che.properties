#
# Copyright (c) 2012-2022 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

# {orch-name}: Kubernetes or OpenShift
# {prod-short}: Eclipse Che

### {prod-short} server

# API service. Browsers initiate REST communications to {prod-short} server with this URL.
che.api=http://${CHE_HOST}:${CHE_PORT}/api

# API service internal network URL. Back-end services should initiate REST communications to {prod-short} server with this URL
che.api.internal=NULL

# {prod-short} WebSocket major endpoint. Provides basic communication endpoint
# for major WebSocket interactions and messaging.
che.websocket.endpoint=ws://${CHE_HOST}:${CHE_PORT}/api/websocket

# {prod-short} WebSocket major internal endpoint. Provides basic communication endpoint
# for major WebSocket interactions and messaging.
che.websocket.internal.endpoint=NULL

# Your projects are synchronized from the {prod-short} server into the machine running each
# workspace. This is the directory in the machine where your projects are placed.
che.workspace.projects.storage=/projects

# Used when {orch-name}-type components in a devfile request project PVC creation
# (Applied in case of `unique` and `per workspace` PVC strategy. In case of the `common` PVC strategy,
# it is rewritten with the value of the `che.infra.kubernetes.pvc.quantity` property.)
che.workspace.projects.storage.default.size=1Gi

# Defines the directory inside the machine where all the workspace logs are placed.
# Provide this value into the machine, for example, as an environment variable.
# This is to ensure that agent developers can use this directory to back up agent logs.
che.workspace.logs.root_dir=/workspace_logs

# Configures environment variable HTTP_PROXY to a specified value in containers powering workspaces.
che.workspace.http_proxy=

# Configures environment variable HTTPS_PROXY to a specified value in containers powering workspaces.
che.workspace.https_proxy=

# Configures environment variable NO_PROXY to a specified value in containers powering workspaces.
che.workspace.no_proxy=

# By default, when users access a workspace with its URL, the workspace
# automatically starts (if currently stopped). Set this to `false` to disable this behavior.
che.workspace.auto_start=true

# Workspace threads pool configuration. This pool is used for workspace-related
# operations that require asynchronous execution, for example, starting and stopping.
# Possible values are `fixed` and `cached`.
che.workspace.pool.type=fixed

# This property is ignored when pool type is different from `fixed`.
# It configures the exact size of the pool. When set, the `multiplier` property is ignored.
# If this property is not set (`0`, `<0`, `NULL`), then the pool size equals the number of cores.
# See also `che.workspace.pool.cores_multiplier`.
che.workspace.pool.exact_size=30

# This property is ignored when pool type is not set to `fixed`, `che.workspace.pool.exact_size`
# is set. When set, the pool size is `N_CORES * multiplier`.
che.workspace.pool.cores_multiplier=2

# This property specifies how many threads to use for workspace server liveness probes.
che.workspace.probe_pool_size=10


# HTTP proxy setting for workspace JVM.
che.workspace.http_proxy_java_options=NULL

# Java command-line options added to JVMs running in workspaces.
che.workspace.java_options=-XX:MaxRAM=150m -XX:MaxRAMFraction=2 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom

# Maven command-line options added to JVMs running agents in workspaces.
che.workspace.maven_options=-XX:MaxRAM=150m -XX:MaxRAMFraction=2 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom

# RAM limit default for each machine that has no RAM settings in its environment.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_memory_limit_mb=1024

# RAM request for each container that has no explicit RAM settings in its environment.
# This amount is allocated when the workspace container is created.
# This property may not be supported by all infrastructure implementations.
# Currently it is supported by {orch-name}.
# A memory request exceeding the memory limit is ignored, and only the limit size is used.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_memory_request_mb=200

# CPU limit for each container that has no CPU settings in its environment.
# Specify either in floating point cores number, for example, `0.125`,
# or using the Kubernetes format, integer millicores, for example, `125m`.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_cpu_limit_cores=-1

# CPU request for each container that has no CPU settings in environment.
# A CPU request exceeding the CPU limit is ignored, and only limit number is used.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.default_cpu_request_cores=-1

# RAM limit for each sidecar that has no RAM settings in the {prod-short} plug-in configuration.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.sidecar.default_memory_limit_mb=128

# RAM request for each sidecar that has no RAM settings in the {prod-short} plug-in configuration.
che.workspace.sidecar.default_memory_request_mb=64

# CPU limit default for each sidecar that has no CPU settings in the {prod-short} plug-in configuration.
# Specify either in floating point cores number, for example, `0.125`,
# or using the Kubernetes format, integer millicores, for example, `125m`.
# Value less or equal to 0 is interpreted as disabling the limit.
che.workspace.sidecar.default_cpu_limit_cores=-1

# CPU request default for each sidecar that has no CPU settings in the {prod-short} plug-in configuration.
# Specify either in floating point cores number, for example, `0.125`,
# or using the Kubernetes format, integer millicores, for example, `125m`.
che.workspace.sidecar.default_cpu_request_cores=-1

# Defines image-pulling strategy for sidecars. Possible values are: `Always`,
# `Never`, `IfNotPresent`. For any other value, `Always` is assumed for images
# with the `:latest` tag, or `IfNotPresent` for all other cases.
che.workspace.sidecar.image_pull_policy=Always


# Period of inactive workspaces suspend job execution.
che.workspace.activity_check_scheduler_period_s=60

# The period of the cleanup of the activity table. The activity table can contain invalid or stale data
# if some unforeseen errors happen, as a server failure at a peculiar point in time. The default is to
# run the cleanup job every hour.
che.workspace.activity_cleanup_scheduler_period_s=3600

# The delay after server startup to start the first activity clean up job.
che.workspace.activity_cleanup_scheduler_initial_delay_s=60


# Delay before first workspace idleness check job started to avoid
# mass suspend if {prod-short} server was unavailable for period close to
# inactivity timeout.
che.workspace.activity_check_scheduler_delay_s=180


# Time to delay the first execution of temporary workspaces cleanup job.
che.workspace.cleanup_temporary_initial_delay_min=5

# Time to delay between the termination of one execution and the commencement
# of the next execution of temporary workspaces cleanup job
che.workspace.cleanup_temporary_period_min=180


# Number of sequential successful pings to server after which it is treated as available.
# the {prod-short} Operator: the property is common for all servers, for example, workspace agent, terminal, exec.
che.workspace.server.ping_success_threshold=1

# Interval, in milliseconds, between successive pings to workspace server.
che.workspace.server.ping_interval_milliseconds=3000

# List of servers names which require liveness probes
che.workspace.server.liveness_probes=wsagent/http,exec-agent/http,terminal,theia,jupyter,dirigible,cloud-shell,intellij

# Limit size of the logs collected from single container that can be observed by che-server when
# debugging workspace startup.
# default 10MB=10485760
che.workspace.startup_debug_log_limit_bytes=10485760

# If true, 'stop-workspace' role with the edit privileges will be granted to the 'che' ServiceAccount if OpenShift OAuth is enabled.
# This configuration is mainly required for workspace idling when the OpenShift OAuth is enabled.
che.workspace.stop.role.enabled=true

# Specifies whether {prod-short} is deployed with DevWorkspaces enabled.
# This property is set by the {prod-short} Operator if it also installed the support for DevWorkspaces.
# This property is used to advertise this fact to the {prod-short} dashboard.
# It does not make sense to change the value of this property manually.
che.devworkspaces.enabled=false

### Authentication parameters

# {prod-short} has a single identity implementation, so this does not change the user experience.
# If true, enables user creation at API level
che.auth.user_self_creation=false

# Authentication error page address
che.auth.access_denied_error_page=/error-oauth

# Reserved user names
che.auth.reserved_user_names=


# Configuration of GitHub OAuth2 client. Used to obtain Personal access tokens.
# Location of the file with GitHub client id.
che.oauth2.github.clientid_filepath=NULL

# Location of the file with GitHub client secret.
che.oauth2.github.clientsecret_filepath=NULL

# GitHub OAuth authorization URI.
che.oauth.github.authuri= https://github.com/login/oauth/authorize

# GitHub OAuth token URI.
che.oauth.github.tokenuri= https://github.com/login/oauth/access_token

# GitHub OAuth redirect URIs.
# Separate multiple values with comma, for example: URI,URI,URI
che.oauth.github.redirecturis= http://localhost:${CHE_PORT}/api/oauth/callback

# Configuration of OpenShift OAuth client. Used to obtain OpenShift OAuth token.
# OpenShift OAuth client ID.
che.oauth.openshift.clientid=NULL
# OpenShift OAuth client secret.
che.oauth.openshift.clientsecret=NULL
# OpenShift OAuth endpoint.
che.oauth.openshift.oauth_endpoint= NULL
# OpenShift OAuth verification token URL.
che.oauth.openshift.verify_token_url= NULL

# Configuration of Bitbucket Server OAuth1 client. Used to obtain Personal access tokens.
# Location of the file with Bitbucket Server application consumer key (equivalent to a username).
che.oauth1.bitbucket.consumerkeypath=NULL
# Location of the file with Bitbucket Server application private key
che.oauth1.bitbucket.privatekeypath=NULL
# Bitbucket Server URL. To work correctly with factories the same URL
# has to be part of `che.integration.bitbucket.server_endpoints` too.
che.oauth1.bitbucket.endpoint=NULL


### Internal

# {prod-short} extensions can be scheduled executions on a time basis.
# This configures the size of the thread pool allocated to extensions that are launched on
# a recurring schedule.
schedule.core_pool_size=10

# DB initialization and migration configuration
# If true, ignore scripts up to the version configured by baseline.version.
db.schema.flyway.baseline.enabled=true

# Scripts with version up to this are ignored.
# Note that scripts with version equal to baseline version are also ignored.
db.schema.flyway.baseline.version=5.0.0.8.1

# Prefix of migration scripts.
db.schema.flyway.scripts.prefix=

# Suffix of migration scripts.
db.schema.flyway.scripts.suffix=.sql

# Separator of version from the other part of script name.
db.schema.flyway.scripts.version_separator=__

# Locations where to search migration scripts.
db.schema.flyway.scripts.locations=classpath:che-schema

### Kubernetes Infra parameters

# Configuration of Kubernetes client master URL that Infra will use.
che.infra.kubernetes.master_url=

# Boolean to configure Kubernetes client to use trusted certificates.
che.infra.kubernetes.trust_certs=false

# Kubernetes cluster domain. If not set, svc names will not contain information about the cluster domain.
che.infra.kubernetes.cluster_domain=NULL

# Defines the way how servers are exposed to the world in Kubernetes infra.
# List of strategies implemented in {prod-short}: `default-host`, `multi-host`, `single-host`.
che.infra.kubernetes.server_strategy=multi-host

# Defines the way in which the workspace plugins and editors are exposed in the single-host mode.
# Supported exposures:
# `native`:: Exposes servers using Kubernetes Ingresses. Works only on Kubernetes.
# `gateway`:: Exposes servers using reverse-proxy gateway.
che.infra.kubernetes.singlehost.workspace.exposure=native

# Defines the way how to expose devfile endpoints, as end-user's applications, in single-host server strategy.
# They can either follow the single-host strategy and be exposed on subpaths, or they can be exposed on subdomains.
# `multi-host`:: expose on subdomains
# `single-host`:: expose on subpaths
che.infra.kubernetes.singlehost.workspace.devfile_endpoint_exposure=multi-host

# Defines labels which will be set to ConfigMaps configuring single-host gateway.
che.infra.kubernetes.singlehost.gateway.configmap_labels=app=che,component=che-gateway-config

# Used to generate domain for a server in a workspace in case property `che.infra.kubernetes.server_strategy` is set to `multi-host`
che.infra.kubernetes.ingress.domain=

# Indicates whether {prod-short} server is allowed to create {orch-namespace} for user
# workspaces, or they're intended to be created manually by cluster administrator.
# This property is also used by the OpenShift infra.
che.infra.kubernetes.namespace.creation_allowed=true

# Defines Kubernetes default namespace in which user's workspaces are created
# if user does not override it.
# It's possible to use `<username>` and `<userid>` placeholders (for example: `che-workspace-<username>`).
# In that case, new namespace will be created for each user.
# Used by OpenShift infra as well to specify a Project.
# The `<username>` or `<userid>` placeholder is mandatory.
che.infra.kubernetes.namespace.default=<username>-che

# Defines whether che-server should try to label the workspace namespaces.
# NOTE: It is strongly recommended to keep the value of this property set to true. If false, the new workspace namespaces will not be labeled
# automatically and therefore not recognized by the Che operator making some features of DevWorkspaces not working.
# If false, an administrator is required to label the namespaces manually using the labels specified in che.infra.kubernetes.namespace.labels.
# If you want to manage the namespaces yourself, make sure to follow
# https://www.eclipse.org/che/docs/stable/administration-guide/provisioning-namespaces-in-advance/.
# Any additional labels present on the namespace are kept in place and do not affect the functionality.
# Also note that the the administrator is free to pre-create and label the namespaces manually even if this property is
# true. No updates to the namespaces are done if they already conform to the labeling requirements.
che.infra.kubernetes.namespace.label=true

# Defines whether che-server should try to annotate the workspace namespaces.
che.infra.kubernetes.namespace.annotate=true

# List of labels to find {orch-namespace} that are used for {prod-short} Workspaces.
# They are used to:
#  - find prepared {orch-namespace} for users in combination with `che.infra.kubernetes.namespace.annotations`.
#  - actively label {orch-namespace} with any workspace.
# NOTE: It is strongly recommended not to change the value of this property because the Che operator relies on these labels 
# and their precise values when reconciling DevWorkspaces. If this configuration is changed, the namespaces will not be automatically
# recognized by the Che operator as workspace namespaces unless manually labeled as such using the default labels and values.
# Additional labels on the namespace do not affect the functionality.
che.infra.kubernetes.namespace.labels=app.kubernetes.io/part-of=che.eclipse.org,app.kubernetes.io/component=workspaces-namespace

# List of annotations to find {orch-namespace} prepared for {prod-short} users workspaces.
# Only {orch-namespace} matching the `che.infra.kubernetes.namespace.labels` will be matched against these annotations.
# {orch-namespace} that matches both `che.infra.kubernetes.namespace.labels` and `che.infra.kubernetes.namespace.annotations`
# will be preferentially used for User's workspaces.
# It's possible to use `<username>` placeholder to specify the {orch-namespace} to concrete user.
# They are used to:
#  - find prepared {orch-namespace} for users in combination with `che.infra.kubernetes.namespace.labels`.
#  - actively annotate {orch-namespace} with any workspace.
che.infra.kubernetes.namespace.annotations=che.eclipse.org/username=<username>

# Defines Kubernetes Service Account name which should be specified to be bound to all workspaces Pods.
# the {prod-short} Operator that Kubernetes Infrastructure will not create the service account and it should exist.
# OpenShift infrastructure will check if project is predefined(if `che.infra.openshift.project` is not empty):
#  - if it is predefined then service account must exist there
#  - if it is 'NULL' or empty string then infrastructure will create new OpenShift project per workspace
#    and prepare workspace service account with needed roles there
che.infra.kubernetes.service_account_name=NULL

# Specifies optional, additional cluster roles to use with the workspace service account.
# the {prod-short} Operator that the cluster role names must already exist, and the {prod-short} service account needs to be able to create a Role Binding
# to associate these cluster roles with the workspace service account. The names are comma separated.
# This property deprecates `che.infra.kubernetes.cluster_role_name`.
che.infra.kubernetes.workspace_sa_cluster_roles=NULL

# Cluster roles to assign to user in his namespace
che.infra.kubernetes.user_cluster_roles=NULL

# Defines wait time that limits the Kubernetes workspace start time.
che.infra.kubernetes.workspace_start_timeout_min=8

# Defines the timeout in minutes that limits the period for which Kubernetes Ingress become ready
che.infra.kubernetes.ingress_start_timeout_min=5

# If during workspace startup an unrecoverable event defined in the property occurs,
# stop the workspace immediately rather than waiting until timeout.
# the {prod-short} Operator that this SHOULD NOT include a mere "Failed" reason, because that might catch events that are not unrecoverable.
# A failed container startup is handled explicitly by {prod-short} server.
che.infra.kubernetes.workspace_unrecoverable_events=FailedMount,FailedScheduling,MountVolume.SetUp failed,Failed to pull image,FailedCreate,ReplicaSetCreateError

# Defines whether use the Persistent Volume Claim for {prod-short} workspace needs,
# for example: backup projects, logs, or disable it.
che.infra.kubernetes.pvc.enabled=true

# Defined which strategy will be used while choosing PVC for workspaces.
#
# Supported strategies:
# `common`::
#        All workspaces in the same {orch-namespace} will reuse the same PVC.
#        Name of PVC may be configured with `che.infra.kubernetes.pvc.name`.
#        Existing PVC will be used or a new one will be created if it does not exist.
#
# `unique`::
#        Separate PVC for each workspace's volume will be used.
#        Name of PVC is evaluated as `'{che.infra.kubernetes.pvc.name} + '-' + {generated_8_chars}'`.
#        Existing PVC will be used or a new one will be created if it does not exist.
#
# `per-workspace`::
#        Separate PVC for each workspace will be used.
#        Name of PVC is evaluated as `'{che.infra.kubernetes.pvc.name} + '-' + {WORKSPACE_ID}'`.
#        Existing PVC will be used or a new one will be created if it doesn't exist.
che.infra.kubernetes.pvc.strategy=common

# Defines whether to run a job that creates workspace's subpath directories in persistent volume for the `common` strategy before launching a workspace.
# Necessary in some versions of {orch-name} as workspace subpath volume mounts are created with root permissions,
# and therefore cannot be modified by workspaces running as a user (presents an error importing projects into a workspace in {prod-short}).
# The default is `true`, but should be set to `false` if the version of {orch-name} creates subdirectories with user permissions.
# See: link:https://github.com/kubernetes/kubernetes/issues/41638[subPath in volumeMount is not writable for non-root users #41638]
# the {prod-short} Operator that this property has effect only if the `common` PVC strategy used.
che.infra.kubernetes.pvc.precreate_subpaths=true

# Defines the settings of PVC name for {prod-short} workspaces.
# Each PVC strategy supplies this value differently.
# See documentation for `che.infra.kubernetes.pvc.strategy` property
che.infra.kubernetes.pvc.name=claim-che-workspace

# Defines the storage class of Persistent Volume Claim for the workspaces.
# Empty strings means "use default".
che.infra.kubernetes.pvc.storage_class_name=

# Defines the size of Persistent Volume Claim of {prod-short} workspace.
# See: link:https://docs.openshift.com/container-platform/4.4/storage/understanding-persistent-storage.html[Understanding persistent storage]
che.infra.kubernetes.pvc.quantity=10Gi

# Pod that is launched when performing persistent volume claim maintenance jobs on OpenShift
che.infra.kubernetes.pvc.jobs.image=registry.access.redhat.com/ubi8-minimal:8.3-230

# Image pull policy of container that used for the maintenance jobs on {orch-name} cluster
che.infra.kubernetes.pvc.jobs.image.pull_policy=IfNotPresent

# Defines Pod memory limit for persistent volume claim maintenance jobs
che.infra.kubernetes.pvc.jobs.memorylimit=250Mi

# Defines Persistent Volume Claim access mode.
# the {prod-short} Operator that for common PVC strategy changing of access mode affects the number of simultaneously running workspaces.
# If the OpenShift instance running {prod-short} is using Persistent Volumes with RWX access mode, then a limit of running workspaces at the same time is bounded only by {prod-short} limits configuration: RAM, CPU, and so on.
# See: link:https://docs.openshift.com/container-platform/4.4/storage/understanding-persistent-storage.html[Understanding persistent storage]
che.infra.kubernetes.pvc.access_mode=ReadWriteOnce

# Defines if {prod-short} Server should wait workspaces Persistent Volume Claims to become bound after creating.
# Default value is `true`.
# The parameter is used by all Persistent Volume Claim strategies.
#
# It should be set to `false` when `volumeBindingMode` is configured to `WaitForFirstConsumer` otherwise workspace starts will hangs up on phase of waiting PVCs.
#
che.infra.kubernetes.pvc.wait_bound=true

# Defines annotations for ingresses which are used for servers exposing. Value depends on the kind of ingress
# controller.
#
# OpenShift infrastructure ignores this property because it uses Routes rather than Ingresses.
#
# the {prod-short} Operator that for a single-host deployment strategy to work, a controller supporting URL rewriting has to be
# used (so that URLs can point to different servers while the servers do not need to support changing the app root).
# The `che.infra.kubernetes.ingress.path.rewrite_transform` property defines how the path of the ingress should be
# transformed to support the URL rewriting and this property defines the set of annotations on the ingress itself
# that instruct the chosen ingress controller to actually do the URL rewriting, potentially building on the path
# transformation (if required by the chosen ingress controller).
#
# For example for Nginx ingress controller 0.22.0 and later the following value is recommended:
# `{"ingress.kubernetes.io/rewrite-target": "/$1","ingress.kubernetes.io/ssl-redirect": "false",\
#     "ingress.kubernetes.io/proxy-connect-timeout": "3600","ingress.kubernetes.io/proxy-read-timeout": "3600",
#     "nginx.org/websocket-services": "<service-name>"}`
# and the `che.infra.kubernetes.ingress.path.rewrite_transform` should be set to `"%s(.*)"`.
#
# For nginx ingress controller older than 0.22.0, the rewrite-target should be set to merely `/` and the path transform
# to `%s` (see the `che.infra.kubernetes.ingress.path.rewrite_transform` property).
#
# See the Nginx ingress controller documentation for the explanation of how the ingress controller uses
# the regular expression available in the ingress path and how it achieves the URL rewriting.
che.infra.kubernetes.ingress.annotations_json=NULL

# Defines a recipe on how to declare the path of the ingress that should expose a server.
# The `%s` represents the base public URL of the server and is guaranteed to end with a forward slash. This property
# must be a valid input to the `String.format()` method and contain exactly one reference to `%s`.
#
# See the description of the `che.infra.kubernetes.ingress.annotations_json` property to see how these two
# properties interplay when specifying the ingress annotations and path.
#
# If not defined, this property defaults to `%s` (without the quotes) which means that the path is not transformed in
# any way for use with the ingress controller.
che.infra.kubernetes.ingress.path_transform=NULL

# Additional labels to add into every Ingress created by {prod-short} server
# to allow clear identification.
che.infra.kubernetes.ingress.labels=NULL

# Defines security context for Pods that will be created by Kubernetes Infra
#
# This is ignored by OpenShift infra
che.infra.kubernetes.pod.security_context.run_as_user=NULL

# Defines security context for Pods that will be created by Kubernetes Infra.
# A special supplemental group that applies to all containers in a Pod.
# This is ignored by OpenShift infra.
che.infra.kubernetes.pod.security_context.fs_group=NULL

# Defines grace termination period for Pods that will be created by {orch-name} infrastructures.
#
# Default value: `0`. It allows to stop Pods quickly and significantly decrease the time required for stopping a workspace.
# the {prod-short} Operator: if `terminationGracePeriodSeconds` have been explicitly set in {orch-name} recipe it will not be overridden.
che.infra.kubernetes.pod.termination_grace_period_sec=0

# Creates Ingresses with Transport Layer Security (TLS) enabled.
# In OpenShift infrastructure, Routes will be TLS-enabled.
che.infra.kubernetes.tls_enabled=false

# Name of a secret that should be used when creating workspace ingresses with TLS.
# This property is ignored by OpenShift infrastructure.
che.infra.kubernetes.tls_secret=

# Data for TLS Secret that should be used for workspaces Ingresses.
# `cert` and `key` should be encoded with Base64 algorithm.
# These properties are ignored by OpenShift infrastructure.
che.infra.kubernetes.tls_key=NULL

# Certificate data for TLS Secret that should be used for workspaces Ingresses.
# Certificate should be encoded with Base64 algorithm.
# This property is ignored by OpenShift infrastructure.
che.infra.kubernetes.tls_cert=NULL

# Defines the period with which runtimes consistency checks will be performed.
# If runtime has inconsistent state then runtime will be stopped automatically.
# Value must be more than 0 or `-1`, where `-1` means that checks won't be performed at all.
#
# It is disabled by default because there is possible {prod-short} Server configuration when {prod-short} Server
# doesn't have an ability to interact with Kubernetes API when operation is not invoked by user.
#
# It DOES work on the following configurations:
# - workspaces objects are created in the same namespace where {prod-short} Server is located;
# - `cluster-admin` service account token is mounted to {prod-short} Server Pod.
#
# It DOES NOT work on the following configurations:
# - {prod-short} Server communicates with Kubernetes API using token from OAuth provider.
che.infra.kubernetes.runtimes_consistency_check_period_min=-1


# Name of the ConfigMap in {prod-short} server namespace with additional CA TLS certificates to be propagated into all user's workspaces.
# If the property is set on OpenShift 4 infrastructure, and `che.infra.openshift.trusted_ca.dest_configmap_labels` includes the `config.openshift.io/inject-trusted-cabundle=true` label, then cluster CA bundle will be propagated too.
che.infra.kubernetes.trusted_ca.src_configmap=NULL

# Name of the ConfigMap in a workspace namespace with additional CA TLS certificates.
# Holds the copy of `che.infra.kubernetes.trusted_ca.src_configmap` but in a workspace namespace.
# Content of this ConfigMap is mounted into all workspace containers including plugin brokers.
# Do not change the ConfigMap name unless it conflicts with the already existing ConfigMap.
# the {prod-short} Operator that the resulting ConfigMap name can be adjusted eventually to make it unique in {orch-namespace}.
# The original name would be stored in `che.original_name` label.
che.infra.kubernetes.trusted_ca.dest_configmap=ca-certs

# Configures path on workspace containers where the CA bundle should be mounted.
# Content of ConfigMap specified by `che.infra.kubernetes.trusted_ca.dest_configmap` is mounted.
che.infra.kubernetes.trusted_ca.mount_path=/public-certs

# Comma separated list of labels to add to the CA certificates ConfigMap in user workspace.
# See the `che.infra.kubernetes.trusted_ca.dest_configmap` property.
che.infra.kubernetes.trusted_ca.dest_configmap_labels=


### OpenShift Infra parameters

# Comma separated list of labels to add to the CA certificates ConfigMap in user workspace.
# See `che.infra.kubernetes.trusted_ca.dest_configmap` property.
# This default value is used for automatic cluster CA bundle injection in OpenShift 4.
che.infra.openshift.trusted_ca.dest_configmap_labels=config.openshift.io/inject-trusted-cabundle=true

# Additional labels to add into every Route created by {prod-short} server to allow clear identification.
che.infra.openshift.route.labels=NULL

# The hostname that should be used as a suffix for the workspace routes.
# For example: Using `domain_suffix=__<{che-host}>__`, the route resembles: `routed3qrtk.__<{che-host}>__`.
# It has to be a valid DNS name.
che.infra.openshift.route.host.domain_suffix=NULL

# Initialize OpenShift project with {prod-short} server's service account
# if OpenShift OAuth is enabled.
che.infra.openshift.project.init_with_server_sa=true

### Experimental properties

# Next properties are subject to changes and removal, so do not rely on them in a stable {prod-short} instance.

# Docker image of {prod-short} plugin broker app that resolves workspace tools configuration and copies plugins dependencies to a workspace.
# The {prod-short} Operator overrides these images by default. Changing the images here will not
# have an effect if {prod-short} is installed using the Operator.
che.workspace.plugin_broker.metadata.image=quay.io/eclipse/che-plugin-metadata-broker:v3.4.0

# Docker image of Che plugin artifacts broker.
# This broker runs as an init container on the workspace Pod. Its job is to take in a list of plugin identifiers
# (either references to a plugin in the registry or a link to a plugin meta.yaml) and ensure that the correct .vsix
# and .theia extensions are downloaded into the /plugins directory, for each plugin requested for the workspace.
che.workspace.plugin_broker.artifacts.image=quay.io/eclipse/che-plugin-artifacts-broker:v3.4.0

# Configures the default behavior of the plugin brokers when provisioning plugins into a workspace.
# If set to true, the plugin brokers will attempt to merge plugins when possible: they run in
# the same sidecar image and do not have conflicting settings. This value is the default setting
# used when the devfile does not specify the `mergePlugins` attribute.
che.workspace.plugin_broker.default_merge_plugins=false

# Docker image of {prod-short} plugin broker app that resolves workspace tools configuration and copies
# plugins dependencies to a workspace
che.workspace.plugin_broker.pull_policy=Always

# Defines the timeout in minutes that limits the max period of result waiting for plugin broker.
che.workspace.plugin_broker.wait_timeout_min=3

# Workspace plug-ins registry endpoint. Should be a valid HTTP URL.
# Example: ++http://che-plugin-registry-eclipse-che.192.168.65.2.nip.io++
# In case {prod-short} plug-ins registry is not needed value 'NULL' should be used
che.workspace.plugin_registry_url=https://che-plugin-registry.prod-preview.openshift.io/v3

# Workspace plugins registry internal endpoint. Should be a valid HTTP URL.
# Example: ++http://devfile-registry.che.svc.cluster.local:8080++
# In case {prod-short} plug-ins registry is not needed value 'NULL' should be used
che.workspace.plugin_registry_internal_url=NULL

# Devfile Registry endpoint. Should be a valid HTTP URL.
# Example: ++http://che-devfile-registry-eclipse-che.192.168.65.2.nip.io++
# In case {prod-short} plug-ins registry is not needed value 'NULL' should be used
che.workspace.devfile_registry_url=https://che-devfile-registry.prod-preview.openshift.io/

# Devfile Registry "internal" endpoint. Should be a valid HTTP URL.
# Example: ++http://plugin-registry.che.svc.cluster.local:8080++
# In case {prod-short} plug-ins registry is not needed value 'NULL' should be used
che.workspace.devfile_registry_internal_url=NULL

# The configuration property that defines available values for storage types that clients such as the Dashboard should propose to users during workspace creation and update.
# Available values:
#   - `persistent`: Persistent Storage slow I/O but persistent.
#   - `ephemeral`: Ephemeral Storage allows for faster I/O but may have limited storage
#       and is not persistent.
#   - `async`: Experimental feature: Asynchronous storage is combination of Ephemeral
#       and Persistent storage. Allows for faster I/O and keep your changes, will backup on stop
#       and restore on start workspace.
#       Will work only if:
#           - `che.infra.kubernetes.pvc.strategy='common'`
#           - `che.limits.user.workspaces.run.count=1`
#           - `che.infra.kubernetes.namespace.default` contains `<username>`
#      in other cases remove `async` from the list.
che.workspace.storage.available_types=persistent,ephemeral,async

# The configuration property that defines a default value for storage type that clients such as the Dashboard should propose to users during workspace creation and update.
# The `async` value is an experimental feature, not recommended as default type.
che.workspace.storage.preferred_type=persistent

# Configures in which way secure servers will be protected with authentication.
# Suitable values:
#   - `default`: `jwtproxy` is configured in a pass-through mode. Servers should authenticate requests themselves.
#   - `jwtproxy`: `jwtproxy` will authenticate requests. Servers will receive only authenticated requests.
che.server.secure_exposer=jwtproxy

# `Jwtproxy` issuer string, token lifetime, and optional auth page path to route unsigned requests to.
che.server.secure_exposer.jwtproxy.token.issuer=wsmaster

# JWTProxy issuer token lifetime.
che.server.secure_exposer.jwtproxy.token.ttl=8800h

# Optional authentication page path to route unsigned requests to.
che.server.secure_exposer.jwtproxy.auth.loader.path=/_app/loader.html

# JWTProxy image.
che.server.secure_exposer.jwtproxy.image=quay.io/eclipse/che-jwtproxy:0.10.0

# JWTProxy memory request.
che.server.secure_exposer.jwtproxy.memory_request=15mb

# JWTProxy memory limit.
che.server.secure_exposer.jwtproxy.memory_limit=128mb

# JWTProxy CPU request.
che.server.secure_exposer.jwtproxy.cpu_request=0.03

# JWTProxy CPU limit.
che.server.secure_exposer.jwtproxy.cpu_limit=0.5

### Configuration of the major WebSocket endpoint

# Maximum size of the JSON RPC processing pool
# in case if pool size would be exceeded message execution will be rejected
che.core.jsonrpc.processor_max_pool_size=50

# Initial JSON processing pool. Minimum number of threads that used to process major JSON RPC messages.
che.core.jsonrpc.processor_core_pool_size=5

# Configuration of queue used to process JSON RPC messages.
che.core.jsonrpc.processor_queue_capacity=100000


# Port the HTTP server endpoint that would be exposed with Prometheus metrics.
che.metrics.port=8087

### CORS settings

# Indicates which request origins are allowed.
# CORS filter on WS Master is turned off by default.
# Use environment variable "CHE_CORS_ENABLED=true" to turn it on.
che.cors.allowed_origins=*

# Indicates if it allows processing of requests with credentials (in cookies, headers, TLS client certificates).
che.cors.allow_credentials=false

### Factory defaults

# Editor and plugin which will be used for factories that are created from a remote Git repository
# which does not contain any {prod-short}-specific workspace descriptor
# Multiple plugins must be comma-separated, for example:
# `pluginFooPublisher/pluginFooName/pluginFooVersion,pluginBarPublisher/pluginBarName/pluginBarVersion`
che.factory.default_plugins=redhat/vscode-commons/latest

# Devfile filenames to look on repository-based factories (for example GitHub).
# Factory will try to locate those files in the order they enumerated in the property.
che.factory.default_devfile_filenames=devfile.yaml,.devfile.yaml

### Devfile defaults
# Editor that will be used for factories that are created from a remote Git repository
# which does not contain any {prod-short}-specific workspace descriptor.
che.factory.default_editor=eclipse/che-theia/latest

# File size limit for the URL fetcher which fetch files from the SCM repository.
che.factory.scm_file_fetcher_limit_bytes=102400

# Additional files which may be present in repository to complement devfile v2,
# and should be referenced as links to SCM resolver service in factory to retrieve them.
che.factory.devfile2_files_resolution_list=.che/che-editor.yaml,.che/che-theia-plugins.yaml,.vscode/extensions.json

# Default Editor that should be provisioned into Devfile if there is no specified Editor
# Format is `editorPublisher/editorName/editorVersion` value.
# `NULL` or absence of value means that default editor should not be provisioned.
che.workspace.devfile.default_editor=eclipse/che-theia/latest

# Default Plug-ins which should be provisioned for Default Editor.
# All the plugins from this list that are not explicitly mentioned in the user-defined devfile
# will be provisioned but only when the default editor is used or if the user-defined editor is
# the same as the default one (even if in different version).
# Format is comma-separated `pluginPublisher/pluginName/pluginVersion` values, and URLs. For example:
# `eclipse/che-theia-exec-plugin/0.0.1,eclipse/che-theia-terminal-plugin/0.0.1,https://cdn.pluginregistry.com/vi-mode/meta.yaml`
# If the plugin is a URL, the plugin's `meta.yaml` is retrieved from that URL.
che.workspace.devfile.default_editor.plugins=NULL

# Defines comma-separated list of labels for selecting secrets from a user namespace,
# which will be mount into workspace containers as a files or environment variables.
# Only secrets that match ALL given labels will be selected.
che.workspace.provision.secret.labels=app.kubernetes.io/part-of=che.eclipse.org,app.kubernetes.io/component=workspace-secret

# Plugin is added in case asynchronous storage feature will be enabled in workspace configuration
# and supported by environment
che.workspace.devfile.async.storage.plugin=eclipse/che-async-pv-plugin/latest

# Docker image for the {prod-short} asynchronous storage
che.infra.kubernetes.async.storage.image=quay.io/eclipse/che-workspace-data-sync-storage:0.0.1

# Optionally configures node selector for workspace Pod. Format is comma-separated
# key=value pairs, for example: `disktype=ssd,cpu=xlarge,foo=bar`
che.workspace.pod.node_selector=NULL

# Optionally configures tolerations for workspace Pod. Format is a string representing a JSON Array of taint tolerations,
# or `NULL` to disable it. The objects contained in the array have to follow the
# link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#toleration-v1-core[toleration v1 core specifications].
# Example: `[{"effect":"NoExecute","key":"aNodeTaint","operator":"Equal","value":"aValue"}]`
che.workspace.pod.tolerations_json=NULL

# The timeout for the Asynchronous Storage Pod shutdown after stopping the last used workspace.
# Value less or equal to 0 interpreted as disabling shutdown ability.
che.infra.kubernetes.async.storage.shutdown_timeout_min=120

# Defines the period with which the Asynchronous Storage Pod stopping ability will be performed (once in 30 minutes by default)
che.infra.kubernetes.async.storage.shutdown_check_period_min=30

# Bitbucket endpoints used for factory integrations.
# Comma separated list of Bitbucket server URLs or NULL if no integration expected.
che.integration.bitbucket.server_endpoints=NULL

# GitLab endpoints used for factory integrations.
# Comma separated list of GitLab server URLs or NULL if no integration expected.
che.integration.gitlab.server_endpoints=NULL

# Address of the GitLab server with configured OAuth 2 integration
che.integration.gitlab.oauth_endpoint=NULL

# Configuration of GitLab OAuth2 client. Used to obtain Personal access tokens.
# Location of the file with GitLab client id.
che.oauth2.gitlab.clientid_filepath=NULL

# Location of the file with GitLab client secret.
che.oauth2.gitlab.clientsecret_filepath=NULL
